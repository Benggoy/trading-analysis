name: 🤖 Automated Workflows

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Basic validation and security
  validate:
    name: 🔍 Validate & Test
    runs-on: ubuntu-latest
    steps:
      - name: 📂 Checkout
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: 🎨 Code Format Check
        run: |
          if [ -f requirements.txt ]; then
            black --check . || echo "⚠️ Code formatting issues found - run 'black .' to fix"
            isort --check-only . || echo "⚠️ Import sorting issues found - run 'isort .' to fix"
          fi
          
      - name: 🔍 Lint Check
        run: |
          if [ -f requirements.txt ]; then
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Critical linting issues found"
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
          fi
          
      - name: 🛡️ Security Scan
        run: |
          if [ -f requirements.txt ]; then
            bandit -r . -ll || echo "⚠️ Security scan completed with warnings"
            safety check || echo "⚠️ Dependency security check completed"
          fi
          
      - name: 🧪 Basic Tests
        run: |
          echo "✅ Repository validation completed"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          
          # Test Python imports if requirements exist
          if [ -f requirements.txt ]; then
            python -c "
            import sys
            try:
                import pandas, numpy
                print('✅ Core dependencies available')
            except ImportError as e:
                print(f'⚠️ Some dependencies missing: {e}')
            
            print(f'✅ Python {sys.version} ready')
            "
          fi
          
  # Dependency updates (automated)
  dependency-update:
    name: 🔄 Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: 📂 Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: 🔄 Check for Updates
        run: |
          if [ -f requirements.txt ]; then
            pip install pip-tools
            pip-compile --upgrade requirements.in > requirements.txt 2>/dev/null || echo "No requirements.in found, skipping update"
            
            # Check if there are changes
            if git diff --quiet requirements.txt; then
              echo "No dependency updates needed"
            else
              echo "Dependencies updated - creating PR would be implemented here"
              git diff requirements.txt
            fi
          fi
          
  # Repository health check
  health-check:
    name: 🏥 Repository Health
    runs-on: ubuntu-latest
    steps:
      - name: 📂 Checkout
        uses: actions/checkout@v4
        
      - name: 🏥 Health Check
        run: |
          echo "🏥 Repository Health Check"
          echo "=========================="
          
          # Check for essential files
          FILES=("README.md" "LICENSE")
          for file in "${FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "⚠️ $file missing"
            fi
          done
          
          # Check repository structure
          echo ""
          echo "📁 Repository Structure:"
          find . -type f -name "*.py" | head -10 | while read file; do
            echo "🐍 $file"
          done
          
          find . -type f -name "*.md" | head -5 | while read file; do
            echo "📄 $file"
          done
          
          # Repository stats
          echo ""
          echo "📊 Repository Stats:"
          echo "Python files: $(find . -name '*.py' | wc -l)"
          echo "Markdown files: $(find . -name '*.md' | wc -l)"
          echo "Total files: $(find . -type f | wc -l)"
          
          echo ""
          echo "✅ Health check completed!"
